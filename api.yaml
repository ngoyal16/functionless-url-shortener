openapi: "3.0.1"
info:
  title: "URL Shortener API"
  version: "1.0.0"

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params:
    validateRequestBody: false
    validateRequestParameters: true
  body:
    validateRequestBody: true
    validateRequestParameters: false

paths:
  /:
    ## URL redirector
    get:
      summary: Get a url by ID and redirect
      x-amazon-apigateway-request-validator: params
      parameters:
        - $ref: '#/components/parameters/linkIdHeaderQueryStr'
      responses:
        "301":
          description: "301 redirect"
          headers:
            Location:
              type: "string"
            Cache-Control:
              type: "string"

      ## API Gateway Integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBReadRole, Arn ]
        uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem" }
        httpMethod: "POST"
        requestTemplates:
          application/json: { "Fn::Sub": "{\"Key\": {\"id\": {\"S\": \"$input.params().querystring.go\"}}, \"TableName\": \"${LinkTable}\"}" }
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "301"
            responseParameters:
              method.response.header.Location: "'error?error=url_not_found'"
              method.response.header.Cache-Control: "'max-age=300'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$')) \
                #if($inputRoot.toString().contains(\"Item\")) \
                #set($context.responseOverride.header.Location = $inputRoot.Item.url.S) \
                #end"
        type: "aws"

  /{linkId}:
    ## URL redirector
    get:
      summary: Get a url by ID and redirect
      x-amazon-apigateway-request-validator: params
      parameters:
        - $ref: '#/components/parameters/linkIdHeader'
      responses:
        "301":
          description: "301 redirect"
          headers:
            Location:
              type: "string"
            Cache-Control:
              type: "string"

      ## API Gateway Integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBReadRole, Arn ]
        uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"}
        httpMethod: "POST"
        requestTemplates:
          application/json: {"Fn::Sub": "{\"Key\": {\"id\": {\"S\": \"$input.params().path.linkId\"}}, \"TableName\": \"${LinkTable}\"}"}
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "301"
            responseParameters:
              method.response.header.Location: "'error?error=url_not_found'"
              method.response.header.Cache-Control: "'max-age=300'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$')) \
                #if($inputRoot.toString().contains(\"Item\")) \
                #set($context.responseOverride.header.Location = $inputRoot.Item.url.S) \
                #end"
        type: "aws"

  /api:
    ## Create a new link
    post:
      summary: Create new url
      security:
      - SigV4: []
      x-amazon-apigateway-request-validator: body
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBody'
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"

      ## API Gateway integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBCrudRole, Arn ]
        uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem" }
        httpMethod: "POST"
        requestTemplates:
            application/json: { "Fn::Sub": "#set($Integer = 0) \
              #set($ttl = ${TTL}) \
              #set($inputBody = $input.json('$')) \
              #if($inputBody.toString().contains('ttl'))#set($rawTTL = $input.json('$.ttl'))   #if($rawTTL)#set($ttl = $Integer.parseInt($rawTTL))#end #end \
              #set($expireDate = ($context.requestTimeEpoch / 1000) + $ttl) \
              {\"TableName\": \"${LinkTable}\",\
              \"ConditionExpression\":\"attribute_not_exists(id)\", \
              \"Key\": {\"id\": {\"S\": $input.json('$.id')}}, \
              \"ExpressionAttributeNames\": {\"#u\": \"url\",\"#o\": \"owner\",\"#ts\": \"timestamp\",\"#ip\": \"sourceIp\", \"#accId\": \"accountId\", \"#caller\": \"caller\", \"#principalOrgId\": \"principalOrgId\", \"#userAgent\": \"userAgent\", \"#userArn\": \"userArn\", \"#ttl\": \"ttl\"}, \
              \"ExpressionAttributeValues\":{\":u\": {\"S\": $input.json('$.url')},\":o\": {\"S\": \"$context.identity.user\"},\":ts\": {\"S\": \"$context.requestTime\"},\":ip\": {\"S\": \"$context.identity.sourceIp\"},\":accId\": {\"S\": \"$context.identity.accountId\"},\":caller\": {\"S\": \"$context.identity.caller\"},\":principalOrgId\": {\"S\": \"$context.identity.principalOrgId\"},\":userAgent\": {\"S\": \"$context.identity.userAgent\"},\":userArn\": {\"S\": \"$context.identity.userArn\"},\":ttl\": {\"N\": \"$expireDate\"}},\
              \"UpdateExpression\": \"SET #u = :u, #o = :o, #ts = :ts, #ip = :ip, #accId = :accId, #caller = :caller, #principalOrgId = :principalOrgId, #userAgent = :userAgent, #userArn = :userArn, #ttl = :ttl\", \
              \"ReturnValues\": \"ALL_NEW\"}" }
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: {"Fn::Sub": ["#set($inputRoot = $input.path('$')) \
                {\"id\":\"$inputRoot.Attributes.id.S\", \
                \"url\":\"$inputRoot.Attributes.url.S\",
                \"shortUrl\":\"${shortUrlPrefix}/?go=$inputRoot.Attributes.id.S\",
                \"timestamp\":\"$inputRoot.Attributes.timestamp.S\", \
                \"owner\":\"$inputRoot.Attributes.owner.S\"}", {"shortUrlPrefix": {"Ref": "CustomDomainName"}}] }
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$')) \
                #if($inputRoot.toString().contains(\"ConditionalCheckFailedException\")) \
                #set($context.responseOverride.status = 422)
                {\"error\": true,\"message\": \"URL link already exists\"} \
                #end"
        type: "aws"

  /api/{linkId}:
    ## Get link Detail
    get:
      summary: Get url
      security:
      - SigV4: []
      x-amazon-apigateway-request-validator: params
      parameters:
        - $ref: '#/components/parameters/linkIdHeader'
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Cache-Control:
              type: "string"

      ## AOI gateway integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBReadRole, Arn ]
        uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"}
        httpMethod: "POST"
        requestTemplates:
          application/json: {"Fn::Sub": "{\"Key\": {\"id\": {\"S\": \"$input.params().path.linkId\"}}, \"TableName\": \"${LinkTable}\"}"}
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'no-cache, no-store'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: {"Fn::Sub": ["#set($inputRoot = $input.path('$.Item')) \
                {\"id\":\"$inputRoot.id.S\", \
                \"url\":\"$inputRoot.url.S\",
                \"shortUrl\":\"${shortUrlPrefix}/?go=$inputRoot.id.S\",
                \"timestamp\":\"$inputRoot.timestamp.S\", \
                \"owner\":\"$inputRoot.owner.S\"}", {"shortUrlPrefix": {"Ref": "CustomDomainName"}}] }
        type: "aws"

## Validation models
components:
  schemas:
    PostBody:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          pattern: ^https?://[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)
        ttl:
          type: integer
          description: Time-to-live in seconds
          minimum: 1
          multipleOf: 1
      required:
        - id
        - url
  parameters:
    linkIdHeaderQueryStr:
      in: query
      name: go
      required: true
      description: Short link ID for full URL
      schema:
        type: string
    linkIdHeader:
      in: path
      name: linkId
      required: true
      description: Short link ID for full URL
      schema:
        type: string

## Authorizer definition
securityDefinitions:
  SigV4:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "awsSigv4"
